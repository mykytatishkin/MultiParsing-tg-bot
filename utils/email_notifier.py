import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import os
import traceback
from datetime import datetime
from typing import Optional, List
import json

from .logger import logger

class EmailNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö."""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å–µ–º
    ADDITIONAL_INFO_TEXT = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
    
    def __init__(self, settings_path: str = "settings.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            settings_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        """
        self.settings_path = settings_path
        self.email_config = self._load_email_config()
        self.alert_email = "nikita.tishkin.13+alertMultiBot@gmail.com"
    
    def _load_email_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é email –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        return {}
    
    def _get_smtp_config(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SMTP —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Gmail SMTP
        default_config = {
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 587,
            'use_tls': True
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        smtp_server = os.getenv('SMTP_SERVER')
        smtp_port = os.getenv('SMTP_PORT')
        use_tls = os.getenv('SMTP_USE_TLS')
        
        if smtp_server:
            config = {
                'smtp_server': smtp_server,
                'smtp_port': int(smtp_port) if smtp_port else 587,
                'use_tls': use_tls.lower() == 'true' if use_tls else True
            }
            return config
        
        return default_config
    
    def _get_credentials(self) -> tuple:
        """–ü–æ–ª—É—á–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        email = os.getenv('ALERT_EMAIL_USER')
        password = os.getenv('ALERT_EMAIL_PASSWORD')
        
        if email and password:
            return email, password
        
        # –ï—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None, None
    
    def send_error_notification(self, error: Exception, context: Optional[str] = None, 
                              additional_info: Optional[dict] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ email.
        
        Args:
            error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        Returns:
            True –µ—Å–ª–∏ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            subject = f"üö® MultiParsing Bot Error - {type(error).__name__}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
            body = self._create_error_email_body(error, context, additional_info)
            
            return self._send_email(subject, body)
            
        except Exception as e:
            logger.error(f"Failed to send error notification email: {e}")
            return False
    
    def send_critical_notification(self, error: Exception, context: Optional[str] = None,
                                 additional_info: Optional[dict] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –Ω–∞ email.
        
        Args:
            error: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        Returns:
            True –µ—Å–ª–∏ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            subject = f"üî• CRITICAL: MultiParsing Bot Failure - {type(error).__name__}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
            body = self._create_critical_email_body(error, context, additional_info)
            
            return self._send_email(subject, body)
            
        except Exception as e:
            logger.error(f"Failed to send critical notification email: {e}")
            return False
    
    def send_server_down_notification(self, reason: str, additional_info: Optional[dict] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.
        
        Args:
            reason: –ü—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        Returns:
            True –µ—Å–ª–∏ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            subject = "üí• MultiParsing Bot Server Down"
            
            body = self._create_server_down_email_body(reason, additional_info)
            
            return self._send_email(subject, body)
            
        except Exception as e:
            logger.error(f"Failed to send server down notification email: {e}")
            return False
    
    def _create_error_email_body(self, error: Exception, context: Optional[str], 
                               additional_info: Optional[dict]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        body = f"""
üö® –û–®–ò–ë–ö–ê –í MULTIPARSING BOT

–í—Ä–µ–º—è: {timestamp}
–¢–∏–ø –æ—à–∏–±–∫–∏: {type(error).__name__}
–°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}

"""
        
        if context:
            body += f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n"
        
        if additional_info:
            body += self.ADDITIONAL_INFO_TEXT
            for key, value in additional_info.items():
                body += f"- {key}: {value}\n"
            body += "\n"
        
        body += f"""
–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–∞:
{traceback.format_exc()}

---
–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç MultiParsing Bot.
"""
        
        return body
    
    def _create_critical_email_body(self, error: Exception, context: Optional[str],
                                  additional_info: Optional[dict]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        body = f"""
üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í MULTIPARSING BOT

–í—Ä–µ–º—è: {timestamp}
–¢–∏–ø –æ—à–∏–±–∫–∏: {type(error).__name__}
–°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}

‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –í–ù–ò–ú–ê–ù–ò–ï!

"""
        
        if context:
            body += f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n"
        
        if additional_info:
            body += self.ADDITIONAL_INFO_TEXT
            for key, value in additional_info.items():
                body += f"- {key}: {value}\n"
            body += "\n"
        
        body += f"""
–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–∞:
{traceback.format_exc()}

---
–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –æ—Ç MultiParsing Bot.
"""
        
        return body
    
    def _create_server_down_email_body(self, reason: str, additional_info: Optional[dict]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞–¥–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        body = f"""
üí• –°–ï–†–í–ï–† MULTIPARSING BOT –ù–ï –†–ê–ë–û–¢–ê–ï–¢

–í—Ä–µ–º—è: {timestamp}
–ü—Ä–∏—á–∏–Ω–∞: {reason}

‚ö†Ô∏è –ë–û–¢ –ù–ï –û–¢–í–ï–ß–ê–ï–¢ –ù–ê –ó–ê–ü–†–û–°–´!

"""
        
        if additional_info:
            body += self.ADDITIONAL_INFO_TEXT
            for key, value in additional_info.items():
                body += f"- {key}: {value}\n"
            body += "\n"
        
        body += """
---
–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç MultiParsing Bot.
"""
        
        return body
    
    def _send_email(self, subject: str, body: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email.
        
        Args:
            subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            body: –¢–µ–ª–æ –ø–∏—Å—å–º–∞
            
        Returns:
            True –µ—Å–ª–∏ email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            email, password = self._get_credentials()
            
            if not email or not password:
                logger.warning("Email credentials not configured. Cannot send notification.")
                return False
            
            smtp_config = self._get_smtp_config()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart()
            msg['From'] = email
            msg['To'] = self.alert_email
            msg['Subject'] = subject
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            context = ssl.create_default_context()
            
            with smtplib.SMTP(smtp_config['smtp_server'], smtp_config['smtp_port']) as server:
                if smtp_config['use_tls']:
                    server.starttls(context=context)
                server.login(email, password)
                server.send_message(msg)
            
            logger.info(f"Email notification sent successfully to {self.alert_email}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send email: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
email_notifier = EmailNotifier()
