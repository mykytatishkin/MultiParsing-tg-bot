"""
–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è Telegram –±–æ—Ç–∞.
"""
import sys
import traceback
from typing import Optional
from telegram import Update
from telegram.ext import ContextTypes

from .logger import logger, bot_logger
from .email_notifier import email_notifier

class GlobalErrorHandler:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞."""
    
    def __init__(self):
        self.error_count = 0
        self.max_errors_per_hour = 10  # –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –≤ —á–∞—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    
    async def handle_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –±–æ—Ç–µ.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            error = context.error
            user_info = self._get_user_info(update)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.log_error(
                error, 
                f"Unhandled error in bot for user {user_info['username']} (ID: {user_info['user_id']})"
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.error_count += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
            if self.error_count <= self.max_errors_per_hour:
                email_notifier.send_error_notification(
                    error,
                    f"Unhandled error in bot for user {user_info['username']} (ID: {user_info['user_id']})",
                    {
                        "user_id": user_info['user_id'],
                        "username": user_info['username'],
                        "chat_id": user_info['chat_id'],
                        "message_text": user_info['message_text'],
                        "error_count": self.error_count
                    }
                )
            else:
                logger.warning(f"Error notification limit reached ({self.max_errors_per_hour} per hour)")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
            await self._notify_user(update, context)
            
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∞–º–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫
            logger.critical(f"Critical error in error handler: {e}")
            logger.critical(traceback.format_exc())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            email_notifier.send_critical_notification(
                e,
                "Critical error in global error handler",
                {"original_error": str(context.error) if context.error else "Unknown"}
            )
    
    def _get_user_info(self, update: Update) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        try:
            user = update.effective_user
            chat = update.effective_chat
            message = update.effective_message
            
            return {
                "user_id": user.id if user else "Unknown",
                "username": user.username if user and user.username else "Unknown",
                "first_name": user.first_name if user else "Unknown",
                "chat_id": chat.id if chat else "Unknown",
                "message_text": message.text if message and message.text else "No text",
                "message_id": message.message_id if message else "Unknown"
            }
        except Exception as e:
            logger.error(f"Error extracting user info: {e}")
            return {
                "user_id": "Unknown",
                "username": "Unknown", 
                "first_name": "Unknown",
                "chat_id": "Unknown",
                "message_text": "Unknown",
                "message_id": "Unknown"
            }
    
    async def _notify_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ."""
        try:
            if update and update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        except Exception as e:
            logger.error(f"Failed to notify user about error: {e}")
    
    def reset_error_count(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–≤—ã–∑—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å)."""
        self.error_count = 0
        logger.info("Error count reset")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
global_error_handler = GlobalErrorHandler()
